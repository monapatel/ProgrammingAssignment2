makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
getmatrix <- function() x
setmatrixinverse <- function(inv) i <<- inv
getmatrixinverse <- function()i
list(
set = set
get = get,
setmatrixinverse = setmatrixinverse
getmatrixinverse = getmatrixinverse
)
}
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
setmatrix <- function(y) {
x <<- y
m <<- NULL
}
getmatrix <- function() x
setmatrixinverse <- function(inv) i <<- inv
getmatrixinverse <- function()i
list(
set = set,
get = get,
setmatrixinverse = setmatrixinverse,
getmatrixinverse = getmatrixinverse
)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
m <- x$get()
i <- solve(m, ...)
x$setinverse(i)
i
}
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$getinverse()
if(!is.null(i)) {
message("getting cached data")
return(i)
}
m <- x$get()
i <- solve(m, ...)
x$setinverse(i)
i
}
cachesolve()
cacheSolve()
cacheSolve(x)
b <- makeCacheMatrix(matrix(c(1,3,2,4), nrow = 2, ncol = 2))
b <- makeCacheMatrix(matrix(c(1,3,2,4), nrow = 2, ncol = 2))
b <- makeCacheMatrix(matrix(c(1,3,2,4), nrow = 2, ncol = 2))
x <- makeVector(c(1,2,44))
x <- makeCacheMatrix(c(1,2,44))
x <- function(x)
b <- (matrix(c(1,3,2,4), nrow = 2, ncol = 2)
